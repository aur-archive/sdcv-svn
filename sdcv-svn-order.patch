diff -ur trunk.bak/src/sdcv.cpp trunk/src/sdcv.cpp
--- trunk.bak/src/sdcv.cpp	2011-09-18 22:13:30.551808751 -0500
+++ trunk/src/sdcv.cpp	2011-09-19 10:16:26.115475575 -0500
@@ -50,6 +50,21 @@
 	}
 };
 
+struct GetFilename {
+	GetFilename(std::string bookname_, std::string& filename_) :
+		bookname(bookname_), the_filename(filename_)
+    {}
+	void operator()(const std::string& filename, bool) {
+		DictInfo dict_info;
+        if (dict_info.load_from_ifo_file(filename, false) &&
+            bookname.compare(0, dict_info.bookname.size(), dict_info.bookname) == 0)
+            the_filename = filename;
+	}
+private:
+    std::string bookname;
+    std::string& the_filename;
+};
+
 struct CreateDisableList {
 	CreateDisableList(gchar **use_dist_list, strlist_t& disable_list_) :
 		disable_list(disable_list_)
@@ -176,6 +191,8 @@
 	}
 
 	strlist_t disable_list;
+    strlist_t order_list;
+    strlist_t bookname_list;
 	//DictInfoList  dict_info_list;
   
 	if (use_dict_list) {
@@ -183,17 +200,43 @@
 		CreateDisableList create_disable_list(get_impl(use_dict_list), disable_list);
 		for_each_file(dicts_dir_list, ".ifo", empty_list, 
 			      empty_list, create_disable_list);
-	}
+        gchar **p = get_impl(use_dict_list);
+        while (*p) {
+            bookname_list.push_back(*p);
+            ++p;
+        }
+	}
+    else {
+        FILE *ordering_file;
+        char bookname[1024];
+        if ((ordering_file = fopen((std::string(homedir)+G_DIR_SEPARATOR+".sdcv_ordering").c_str(), "r"))) {
+            while (fgets(bookname, 1023, ordering_file))
+                bookname_list.push_back(bookname);
+            fclose(ordering_file);
+        }
+    }
+
+    // translation from bookname to filename
+    List::const_iterator it;
+    for (it=bookname_list.begin(); it!=bookname_list.end(); ++it) {
+        strlist_t empty_list;
+        std::string filename;
+        GetFilename get_file_name(*it, filename);
+        for_each_file(dicts_dir_list, ".ifo", empty_list,
+                      empty_list, get_file_name);
+        if (!filename.empty() &&
+            std::find(order_list.begin(), order_list.end(), 
+                      filename)==order_list.end())
+            order_list.push_back(filename);
+    }
 
-    
-	string conf_dir = string(g_get_home_dir())+G_DIR_SEPARATOR+".stardict";
+    string conf_dir = string(g_get_home_dir())+G_DIR_SEPARATOR+".stardict";
 	if (g_mkdir(conf_dir.c_str(), S_IRWXU)==-1 && errno!=EEXIST)
 		fprintf(stderr, _("g_mkdir failed: %s\n"), strerror(errno));
 
   
 	Library lib(utf8_input, utf8_output);
-	strlist_t empty_list;
-	lib.load(dicts_dir_list, empty_list, disable_list);
+	lib.load(dicts_dir_list, order_list, disable_list);
 
 
 	std::auto_ptr<read_line> io(create_readline_object());
